import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

public class B {

  public static void main(String [] args) throws Exception{
    BufferedReader inp = new BufferedReader (new FileReader("B-small-practice.in"));
    //BufferedReader inp = new BufferedReader (new InputStreamReader(System.in));
    Long t = Long.parseLong(inp.readLine());
    int id = 1;
    Long T = t;
    PrintWriter writer = new PrintWriter("output2out", "UTF-8");
    while(id<=t){
      Long n = Long.parseLong(inp.readLine());
      writer.println(n+" => "+"Case #"+id+": "+ solveBsmall(n));
      //System.out.println(solveBlarge(n));
	  if(T==id)
		writer.close();
      id++;
    }
  }
  public static String solveBlarge(Long n) throws Exception{
	  String s = String.valueOf(n);
	  String cur = "";
	  boolean hasReduced = false;
	  for(int i=0;i<s.length()-1;i++){
		 if(s.charAt(i) <= s.charAt(i+1)){
			 cur+=s.charAt(i);
			 continue;
		 }
		 else {
			 hasReduced = true;
			 cur+=s.charAt(i);
			 StringBuilder temp = new StringBuilder(cur);
			 int left = i;
			 int reduced = 0;
			 if(temp.charAt(i)-'0'<=1 && i>0) {
				 temp.setCharAt(i, '9');
				 reduced = 1;
			 }
			 else if(i==0) {
				 if(temp.charAt(i)<=1)
					 temp.deleteCharAt(i);
				 else {
					 temp.setCharAt(i,(char)(temp.charAt(i)-'0'-1));
				 }
			 }
			 else {
				 temp.setCharAt(i, (char)(temp.charAt(i)-'0'-1));
			 }
			 if(i>0){
				 while(left>=1){
					 if( temp.charAt(left-1)-'0' > temp.charAt(left)-'0' ){
						 temp.setCharAt(left, '9');
						 if(left-1==0){
							
						 }
						 temp.setCharAt(left-1, (char)(temp.charAt(left-1)-'0'-1));
						 left--;
					 }
					 else if(left==0){
						 if(cur.charAt(left)-'0'== 1){
							 if(left==0){
								 temp.deleteCharAt(left);
							 }
							 else {
								 temp.setCharAt(left,prev);
							 }
							 left--;
						 }
						 else {
							 temp.setCharAt(left,prev);
							 left--;
						 }
					 }
					 else break;
				 }
				 cur = temp.toString();
			 }
			 if(i==0 && s.charAt(i)-'0'>1){
				 cur+=s.charAt(i)-'0'-1;
			 }
			 for(int j=i+1;j<s.length();j++){
				 cur+='9';
			 }
			 break;
		 }
	  }
	  if(s.length()==1) return s;
	  if(hasReduced==false) cur+=s.charAt(s.length()-1);
	  return cur.toString();
  }
  public static Long solveBsmall(Long n){
	  while(n>0 ){
		  if(isTidy(n)) {
			 break;
		  }
		  n--;
	  }
	  return n;
  }
  public static boolean isTidy(Long t){
	  Long n = t;
	  Long previous =  n%10;
	  boolean ok = true;
	  while(n>0){
		  Long last =  n%10;
		  if(previous<last){
			  ok = false;
			  break;
		  }
		  previous = last;
		  n = n/10;
	  }
	  if(ok) return true;
	  return false;
  }
}
